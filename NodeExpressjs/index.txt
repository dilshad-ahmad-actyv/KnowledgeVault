1. What is nodejs?
2. Why nodejs? pros and cons
3. process? 
4. How to pass arguments from terminal and use it in the file? - process.argv
5. How env file works?
6. REPL
7. what is console?
8. core packages. - readline, path, http etc.
9. NPM - init, install, list, view, update
10. npm vs npx
11. module? - A self-contained piece of code that encapsulates specific functionality.
12. package.json vs package-lock.json
13. Semantic versioning - ^, ~ eg. '^4.18.2', ~4.18.2 - major, minor and patch
14. Error handling best practices
15. FileSystem and path module - join(relative path) vs resolve(absolute path)
16. Callback, callback hell
17. Sync/Async, Promises, Async/Await
18. Promise chaining
19. Promise - all, race, any, allSettled etc.
20. API? REST API?
21. Vanila Nodejs CRUP REST API*
22. Http/Https
23. Browser, Server
24. Route
25. PreFlight request
26. Middleware
27. event-driven
28. Nodejs - single threaded or multi-threaded
29. Event-loop
30. Components of Node.js - Event Loops, Callback Queue, Thread Pool, Child Processes
31. Validation, Authentication, Authorization.
32. JWT and how it works
33.  Auth0 Fine-Grained Authorization.
34. CORS
35. Cookies
36. Why should we use JSON Web Tokens? - JWT vs Simple Web Tokens (SWT) and Security Assertion Markup Language Tokens (SAML).
37. Auth0 by Okta?
38. Auth0 vs Auth1.0 vs Auth2.0?
39. Auth0 vs JWT
40. CI/CD 
41. Docker
42. Linux
43. Multi-threading and single-threaded
44. Microservices
45. Streaming
46. development, staging, production
47. Status Codes and uses
48. Port, URL, URI etc.