1. OOPs -
Object-Oriented Programming (OOP) is a programming paradigm that models software entities as objects, which have data (attributes) and behaviors (methods), and interact with each other to solve problems. It's like viewing the world as a collection of interacting objects.

"Object-Oriented Programming is a programming approach where we design software using objects, which are instances of classes. These objects encapsulate data and behaviors, providing a modular and intuitive way to represent real-world entities and their interactions."

Eg. CAR, Bank Account

2. Module or Modular approach - 

In the context of programming, a module refers to a self-contained unit of code that performs a specific functionality. It encapsulates related variables, functions, and classes, providing a way to organize and structure code effectively. Modules help in breaking down large programs into smaller, manageable parts, making the code more modular and easier to maintain, reuse, and understand.

3. Object and Class

4. Pillar of OOPs
    1. Abstraction:
                - Focus: Hiding what a thing does, Hiding internal logic & exposing only the essentials
                - Hiding complex implementation details and showing only the essential features.
                - goal: Reduce complexity
                - Access control: Through interfaces/abstract classes

    2. Encapsulation:
                - Focus: Hiding, what a thing has, Hiding internal data & protecting access to it
                - Bundling data and methods that operate on that data within a single unit (class), and restricting direct access.
                - goal: Increase security and control
                - Access controll: Through access modifiers (public, private, protected)

    3. Inheritance:
                 - A mechanism where one class (child) can inherit the properties and behaviors of another class (parent).
                 - Type: Single, MultiLevel, Hierarchical, Multiple (Diamond problem).

    4. Polymorphism:
                 - One interface, many forms. The ability to use a method in different ways based on the object.
                1. Compile Time/ Static polymorphism/ method overloading
                2. Run Time / Dynamic polymorphism/ method overriding


üçï Real-Life Example (Pizza Ordering System)
Encapsulation: You don‚Äôt know how the order is processed internally, just that you call placeOrder().

Abstraction: You use a simple interface like OrderPizza(), which hides all the kitchen logic.

Inheritance: VegPizza and NonVegPizza inherit from the base Pizza class.

Polymorphism: You call cook() on any pizza, and it behaves differently for VegPizza and NonVegPizza.

üß† Detailed Step-by-Step Explanation

üîê 1. Encapsulation
Keep data (variables) private or protected.

Provide public methods (getters/setters) to access/modify data safely.

üé≠ 2. Abstraction
Define interfaces/abstract classes to expose only the necessary operations.

Hide internal logic (e.g., database or API interactions).

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ 3. Inheritance
Create a base class (e.g., Pizza).

Create child classes (e.g., VegPizza, NonVegPizza) that reuse and extend behavior.

üîÅ 4. Polymorphism
Define a common method in the parent class (e.g., cook()).

Override it in child classes to change behavior.


4. Relationship 
    1. Is - a relationship
    2. Has-a relationship

* "is-a" Relationship: The "is-a" relationship, also known as inheritance or specialization, signifies that one class is a subtype of another class. Eg. Shape, Circle, Rectangle, Square 
* "has-a" Relationship: The "has-a" relationship, also known as composition or aggregation, signifies that one class has another class as a component or member. Eg. a Car, which has Engine, Wheel, and Seat


5. SOLID - 

S - Single Responsibility Priciple
O - Open/Closed Principle
L - Liskov Substitution Principle
I - Interface segmented Principle
D - Dependency Inversion Principle

Advantages:
1. helps to write a better Code
2. Avoid duplicate Code
3. Easy to maintain
4. Easy to understand
5. Flexible software
6. Reduce complexity

S - Single Responsibility Principle ‚Äî> A class has only 1 reason to change
O - Open/Close Principle ‚Äî> Open for extension but close for modification
L - Liskov Substitution Principle ‚Äî> If class B is  subtype of class A, then we should be able to replace object of A with B without breaking the behaviour of the program. Subclass should extend the capacity of parent class not narrow it down.
I - Interface Segmented Principle ‚Äî> Interface should be such that client should not implement unnecessary functions that they do not need.
D - Dependency Inversion Principle ‚Äî> Class should depend on interfaces rather than concrete class

| Letter | Principle                           | Meaning (1-line)                                              |
|--------|-------------------------------------|---------------------------------------------------------------|
| S      | Single Responsibility Principle     | A class should do **one thing only**.                         |
| O      | Open/Closed Principle               | Code should be **open to extension**, closed to modification. |
| L      | Liskov Substitution Principle       | Subclasses should be **replaceable** for base classes.        |
| I      | Interface Segregation Principle     | Don't force classes to implement **unused methods**.          |
| D      | Dependency Inversion Principle      | Depend on **abstractions/Interfaces**, not concrete classes.  |

üçΩÔ∏è 2. Real-Life Example: Restaurant System:

SRP ‚Äì A Chef class should only cook, not handle billing.

OCP ‚Äì Want to add a new dish? Add a new class; don‚Äôt change existing cooking code.

LSP ‚Äì VeganChef should work wherever Chef is expected.

ISP ‚Äì Waiter shouldn't implement CookFood() from a big Employee interface.

DIP ‚Äì Restaurant should depend on an ICookingService, not a Chef.


6. Design Patterns - 
- Design patterns are general/proven reusable solutions to common problems in software design.

- Design Patterns are proven solutions to common problems in software design.
    They are not code, but blueprints that help you structure your code to be:
        Reusable
        Maintainable
        Scalable
Think of them as recipes used by experienced developers to solve recurring problems.


Types - They are categorized into several types based on their purposes and use cases.

1. Creational Patterns - 
    Creational patterns deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.
        a. Singleton
        b. Factory methods(*)
        c. Abstract Factory*
        d. Builder(*)
        e. Prototype
        f. Object Pool
    
2. Structural Patterns - 
    Structural patterns deal with object composition and typically help ensure that if one part of a system changes, the entire system doesn't need to do the same. They help in composing classes and objects to form larger structures.
        a. Adapter
        b. Bridge
        c. Composite(*)
        d. Decorator(*)
        e. Facade
        f. Flyweight
        g. Proxy

3. Behavioral Patterns - 
    Behavioral patterns focus on communication between objects, what goes on between objects and how they operate together. They are concerned with algorithms and the assignment of responsibilities between objects.
        a. Chain of Responsibility
        b. Command
        c. Interpreter
        d. Iterator
        e. Mediator
        f. Memento
        g. Observer(*)
        h. State
        i. Strategy(*)
        j. Template Method
        k. Visitor
